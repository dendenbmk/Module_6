class Figure:
    sides_count=0
    def __init__(self, __sides=int, __color=[0, 0, 0], filled=True):
        self.__sides = __sides
        self.__color = __color
        self.filled = filled
        self.sides_count = __sides

    def get_color(self):
        return self.__color

    def __is_valid_color(self, r, g, b):
        if isinstance((r, g, b), int) and 0 <= r <= 255 and 0 <= g <= 255 and 0 <= b <= 255:
            return True
        else:
            print(f'ошибка в переданных значениях цвета')

    def set_color(self, r, g, b):
        if self.__is_valid_color(r, g, b) == True:
            self.__color = [r, g, b]
        else:
            self.__color = self.__color

    col_sides = 0

    def __is_valid_sides(self, *sides):
        global col_sides
        for side in sides:
            if isinstance(side, int):
                col_sides += 1
                if self.sum(sides) == col_sides:
                    return True
            else:
                    return False

   # Метод __is_valid_sides - служебный, принимает неограниченное кол-во сторон, возвращает True если все стороны целые
   #   положительные числа и кол-во новых сторон совпадает с текущим, False - во всех остальных случаях.


    def get_sides(self):
        return self.__sides

    # Метод get_sides должен возвращать значение я атрибута __sides.

    def __len__(self):
        return sum(self.__sides)

    # Метод __len__ должен возвращать периметр фигуры.

    def set_sides(self, *new_sides):
        global col_sides
        if self.col_sides != self.sides_count:
            self.sides_count = self.col_sides


     #  Метод set_sides(self, *new_sides) должен принимать новые стороны, если их количество не равно sides_count,
     # то не изменять, в противном случае - менять.

class Circle(Figure):


    def __init__(self, sides_count = 1):
        self.sides_count = sides_count
        self.__radius = sides_count / 2 / 3.1415926535
        super().__init__()



    def get_square(self):
        return 3.1415926535 * self.__radius ** 2

# Атрибуты класса Circle: sides_count = 1
# Каждый объект класса Circle должен обладать следующими атрибутами и методами:
# Все атрибуты и методы класса Figure
# Атрибут __radius, рассчитать исходя из длины окружности (одной единственной стороны).
# Метод get_square возвращает площадь круга (можно рассчитать как через длину, так и через радиус).

class Triangle(Figure):
    def __init__(self, sides_count = 3):
        self.sides_count = sides_count
        super().__init__()

    def get_square(self):
        return self.sides_count ** 4 #(можно рассчитать по формуле Герона)

# Атрибуты класса Triangle: sides_count = 3
# Каждый объект класса Triangle должен обладать следующими атрибутами и методами:
# Все атрибуты и методы класса Figure
# Метод get_square возвращает площадь треугольника. (можно рассчитать по формуле Герона)

class Cube(Figure):
    def __init__(self, __sides=int, sides_count = 12):
        self.__sides = __sides
        super().__init__()

    def get_volume(self):
        print(self.__sides)

# Атрибуты класса Cube: sides_count = 12
# Каждый объект класса Cube должен обладать следующими атрибутами и методами:
# Все атрибуты и методы класса Figure.
# Переопределить __sides сделав список из 12 одинаковы сторон (передаётся 1 сторона)
# Метод get_volume, возвращает объём куба.


# circle1 = Circle((200, 200, 100), 10) # (Цвет, стороны)
cube1 = Cube((222, 35, 130), 6)
#
# # Проверка на изменение цветов:
# circle1.set_color(55, 66, 77) # Изменится
# print(circle1.get_color())
cube1.set_color(300, 70, 15) # Не изменится
# print(cube1.get_color())

# Проверка на изменение сторон:
cube1.set_sides(5, 3, 12, 4, 5) # Не изменится
print(cube1.get_sides())
# circle1.set_sides(15) # Изменится
# print(circle1.get_sides())

# # Проверка периметра (круга), это и есть длина:
# print(len(circle1))

# Проверка объёма (куба):
print(cube1.get_volume())
