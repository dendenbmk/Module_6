class Vehicle:                                     # Создали в будующем родительский класс Vehicle

    def __init__(self, owner, model, color, engen_power):  # Который при создании будет "наделять" объекты следующими
# атрибутами Овнер - обычное + наследование дочерними классами, Модель с __ наследование с "__"

        self.owner = owner
        self.__model = model
        self.__engen_power = engen_power
        self.__color = color
    __COLOR_VARIANTS = ['blue', 'red', 'green', 'black', 'white'] # Список возможных покрасок с "__"

    def get_model(self):                        # объявили Метод - получить модель
        return f'Модель: {self.__model}'     #  Возвращает Ф строку с моделью СЭЛФ.Модель

    def get_horsepower(self):
        return f'Мощность двигателя: {self.__engen_power}'

    def get_color(self):
        return f'Цвет: {self.__color}'

    def print_info(self):
        print(f' {self.get_model()} \n {self.get_horsepower()} \n {self.get_color()} \n Владелец, {self.owner}')

    def set_color(self, new_color):
        if new_color.lower() in self._Vehicle__COLOR_VARIANTS:
            self.__color = new_color
        else:
            print(f"Нельзя сменить цвет на {new_color}")


class Sedan(Vehicle):

    __PASSNGER_LIMIT = 5




# Текущие цвета __COLOR_VARIANTS = ['blue', 'red', 'green', 'black', 'white']
vehicle1 = Sedan('Fedos', 'Toyota Mark II', 'blue', 500)

# Изначальные свойства
vehicle1.print_info()

# Меняем свойства (в т.ч. вызывая методы)
vehicle1.set_color('Pink')
vehicle1.set_color('BLACK')
vehicle1.owner = 'Vasyok'

# Проверяем что поменялось
vehicle1.print_info()
